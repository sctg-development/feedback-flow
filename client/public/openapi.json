{
  "openapi": "3.0.0",
  "info": {
    "title": "Feedback Flow API",
    "version": "1.1.0"
  },
  "paths": {
    "/api/testers": {
      "get": {
        "summary": "Get all testers with pagination and sorting",
        "description": "Returns a paginated list of testers. Requires admin permission.",
        "tags": [
          "Testers"
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "integer",
              "default": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of items per page",
            "schema": {
              "type": "integer",
              "default": 10
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort field",
            "schema": {
              "type": "string",
              "default": "name"
            }
          },
          {
            "name": "order",
            "in": "query",
            "description": "Sort order",
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "asc"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved testers",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Tester"
                      }
                    },
                    "total": {
                      "type": "integer"
                    },
                    "page": {
                      "type": "integer"
                    },
                    "limit": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request"
          }
        }
      }
    },
    "/api/tester": {
      "post": {
        "summary": "Add a new tester",
        "description": "Creates a new tester with the provided details. Requires admin permission.",
        "tags": [
          "Testers"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TesterCreateRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Tester successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "uuid": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request or missing required fields"
          },
          "409": {
            "description": "ID already exists in the database"
          },
          "500": {
            "description": "Failed to create tester"
          }
        }
      },
      "get": {
        "summary": "Get tester info by ID",
        "description": "Returns information about the authenticated tester. Requires admin permission.",
        "tags": [
          "Testers"
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved tester info",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "uuid": {
                          "type": "string"
                        },
                        "nom": {
                          "type": "string"
                        },
                        "ids": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request"
          },
          "404": {
            "description": "Tester not found"
          }
        }
      }
    },
    "/api/tester/ids": {
      "post": {
        "summary": "Add ID to existing tester",
        "description": "Adds a new ID to an existing tester. Requires admin permission.",
        "tags": [
          "Testers"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TesterIdAddRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "ID successfully added to tester",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "name": {
                      "type": "string"
                    },
                    "ids": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          },
          "209": {
            "description": "ID already exists for this tester"
          },
          "400": {
            "description": "Invalid request or missing required fields"
          },
          "404": {
            "description": "Tester not found"
          },
          "409": {
            "description": "ID already exists in the database"
          }
        }
      }
    },
    "/api/purchase/{purchaseId}": {
      "delete": {
        "summary": "Delete a purchase by ID",
        "description": "Deletes a purchase record. Requires write permission.",
        "tags": [
          "Purchases"
        ],
        "parameters": [
          {
            "name": "purchaseId",
            "in": "path",
            "required": true,
            "description": "Purchase ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Purchase successfully deleted",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Purchase not found or unauthorized request"
          }
        }
      }
    },
    "/api/purchase": {
      "post": {
        "summary": "Add a new purchase",
        "description": "Creates a new purchase record. Requires write permission.",
        "tags": [
          "Purchases"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PurchaseCreateRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Purchase successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "id": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request or missing required fields"
          }
        }
      }
    },
    "/api/purchase/{id}": {
      "get": {
        "summary": "Get purchase by ID",
        "description": "Returns information about a specific purchase own by a tester. Requires read permission.",
        "tags": [
          "Purchases"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Purchase ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved purchase info",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "data": {
                      "$ref": "#/components/schemas/Purchase"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Purchase not found"
          }
        }
      }
    },
    "/api/purchases/not-refunded": {
      "get": {
        "summary": "Get non-refunded purchases",
        "description": "Returns a paginated list of non-refunded purchases for the authenticated user. Requires read permission.",
        "tags": [
          "Purchases"
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "integer",
              "default": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of items per page",
            "schema": {
              "type": "integer",
              "default": 10
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort field",
            "schema": {
              "type": "string",
              "default": "date"
            }
          },
          {
            "name": "order",
            "in": "query",
            "description": "Sort order",
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "desc"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved purchases",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/PurchaseSummary"
                      }
                    },
                    "total": {
                      "type": "integer"
                    },
                    "page": {
                      "type": "integer"
                    },
                    "limit": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request"
          }
        }
      }
    },
    "/api/purchases/ready-to-refund": {
      "get": {
        "summary": "Get purchases ready for refund",
        "description": "Returns a paginated list of purchases that are not refunded but have feedback and are ready for refund. Includes feedback data with each purchase. Requires read permission.",
        "tags": [
          "Purchases"
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "integer",
              "default": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of items per page",
            "schema": {
              "type": "integer",
              "default": 10
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort field",
            "schema": {
              "type": "string",
              "default": "date"
            }
          },
          {
            "name": "order",
            "in": "query",
            "description": "Sort order",
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "desc"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved purchases ready for refund",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string"
                          },
                          "date": {
                            "type": "string",
                            "format": "date"
                          },
                          "order": {
                            "type": "string"
                          },
                          "description": {
                            "type": "string"
                          },
                          "refunded": {
                            "type": "boolean"
                          },
                          "amount": {
                            "type": "number"
                          },
                          "feedback": {
                            "type": "string",
                            "description": "Feedback content provided by the tester"
                          },
                          "feedbackDate": {
                            "type": "string",
                            "format": "date",
                            "description": "Date when the feedback was submitted"
                          },
                          "publicationDate": {
                            "type": "string",
                            "format": "date",
                            "description": "Date when the purchase was published"
                          },
                          "publicationScreenShot": {
                            "type": "string",
                            "description": "Screenshot of the publication"
                          }
                        }
                      }
                    },
                    "total": {
                      "type": "integer"
                    },
                    "page": {
                      "type": "integer"
                    },
                    "limit": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/api/purchases/refunded": {
      "get": {
        "summary": "Get refunded purchases",
        "description": "Returns a paginated list of refunded purchases for the authenticated user. Requires read permission.",
        "tags": [
          "Purchases"
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "integer",
              "default": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of items per page",
            "schema": {
              "type": "integer",
              "default": 10
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort field",
            "schema": {
              "type": "string",
              "default": "date"
            }
          },
          {
            "name": "order",
            "in": "query",
            "description": "Sort order",
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "desc"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved purchases",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/PurchaseSummary"
                      }
                    },
                    "total": {
                      "type": "integer"
                    },
                    "page": {
                      "type": "integer"
                    },
                    "limit": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request"
          }
        }
      }
    },
    "/api/purchases/refunded-amount": {
      "get": {
        "summary": "Get total amount of refunded purchases",
        "description": "Returns the total amount of refunded purchases for the authenticated user. Requires read permission.",
        "tags": [
          "Purchases"
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved total refunded amount",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "amount": {
                      "type": "number",
                      "description": "Total refunded amount",
                      "example": 123.45
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request"
          }
        }
      }
    },
    "/api/purchases/not-refunded-amount": {
      "get": {
        "summary": "Get total amount of non-refunded purchases",
        "description": "Returns the total amount of non-refunded purchases for the authenticated user. Requires read permission.",
        "tags": [
          "Purchases"
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved total non-refunded amount",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "amount": {
                      "type": "number",
                      "description": "Total non-refunded amount",
                      "example": 456.78
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request"
          }
        }
      }
    },
    "/api/purchase-status": {
      "get": {
        "summary": "Get purchase status with pagination",
        "description": "Returns a paginated list of purchase statuses for the authenticated user. Requires read permission.",
        "tags": [
          "Purchases"
        ],
        "parameters": [
          {
            "name": "limitToNotRefunded",
            "in": "query",
            "description": "Limit to non-refunded purchases",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "integer",
              "default": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of items per page",
            "schema": {
              "type": "integer",
              "default": 10
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort field",
            "schema": {
              "type": "string",
              "default": "date"
            }
          },
          {
            "name": "order",
            "in": "query",
            "description": "Sort order",
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "desc"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved purchase statuses",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/PurchaseStatus"
                      }
                    },
                    "total": {
                      "type": "integer"
                    },
                    "page": {
                      "type": "integer"
                    },
                    "limit": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "403": {
            "description": "Unauthorized request"
          }
        }
      }
    },
    "/api/feedback": {
      "post": {
        "summary": "Add feedback",
        "description": "Creates a new feedback record. Requires write permission.",
        "tags": [
          "Feedback"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FeedbackCreateRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Feedback successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "id": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request or missing required fields"
          }
        }
      }
    },
    "/api/publish": {
      "post": {
        "summary": "Record publication of feedback",
        "description": "Records the publication of feedback. Requires write permission.",
        "tags": [
          "Feedback"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PublishCreateRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Publication successfully recorded",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "id": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request or missing required fields"
          }
        }
      }
    },
    "/api/publish/{id}": {
      "get": {
        "summary": "Get publication info",
        "description": "Returns information about a specific publication. Requires read permission.",
        "tags": [
          "Feedback"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Purchase ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved publication info",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "data": {
                      "$ref": "#/components/schemas/Publication"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Publication not found"
          }
        }
      }
    },
    "/api/refund": {
      "post": {
        "summary": "Record refund",
        "description": "Records a refund for a purchase. Requires write permission.",
        "tags": [
          "Refunds"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RefundCreateRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Refund successfully recorded",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "id": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request or missing required fields"
          }
        }
      }
    },
    "/api/refund/{id}": {
      "get": {
        "summary": "Get refund info",
        "description": "Returns information about a specific refund. Requires read permission.",
        "tags": [
          "Refunds"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Purchase ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved refund info",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "data": {
                      "$ref": "#/components/schemas/Refund"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Refund not found"
          }
        }
      }
    },
    "/api/stats/refund-balance": {
      "get": {
        "summary": "Get refund balance statistics",
        "description": "Returns the difference between the total purchase amount of refunded purchases and the total refund amount. Requires read permission.",
        "tags": [
          "Statistics"
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved refund balance statistics",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "purchasedAmount": {
                      "type": "number",
                      "description": "Total amount of refunded purchases",
                      "example": 123.45
                    },
                    "refundedAmount": {
                      "type": "number",
                      "description": "Total amount of refunds",
                      "example": 120
                    },
                    "balance": {
                      "type": "number",
                      "description": "Difference between purchased and refunded amounts (negative means refunded more than purchased)",
                      "example": 3.45
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/api/stats/refund-delay": {
      "get": {
        "summary": "Get refund delay statistics",
        "description": "Returns statistics about the delay between purchase and refund dates. Requires read permission.",
        "tags": [
          "Statistics"
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved refund delay statistics",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "purchaseId": {
                            "type": "string"
                          },
                          "purchaseAmount": {
                            "type": "number"
                          },
                          "refundAmount": {
                            "type": "number"
                          },
                          "delayInDays": {
                            "type": "number"
                          },
                          "purchaseDate": {
                            "type": "string",
                            "format": "date"
                          },
                          "refundDate": {
                            "type": "string",
                            "format": "date"
                          }
                        }
                      }
                    },
                    "averageDelayInDays": {
                      "type": "number",
                      "description": "Average delay between purchase and refund in days"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/api/backup/json": {
      "get": {
        "summary": "Backup database to JSON",
        "description": "Exports the entire database as JSON. Only available for in-memory and D1 databases. Requires backup permission.",
        "tags": [
          "System"
        ],
        "responses": {
          "200": {
            "description": "Successfully exported database",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Restore database from JSON",
        "description": "Imports database from JSON. Only available for in-memory and D1 databases. Requires backup permission.",
        "tags": [
          "System"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully imported database",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Failed to restore database"
          }
        }
      }
    },
    "/api/__d1/schema": {
      "get": {
        "summary": "Get database table names (available only for D1)",
        "description": "Returns a list of all tables in the database. Requires admin permission.",
        "tags": [
          "System",
          "Cloudflare D1"
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved table names",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "tables": {
                      "type": "array",
                      "description": "List of table names in the database",
                      "items": {
                        "type": "string"
                      },
                      "example": [
                        "sqlite_sequence",
                        "testers",
                        "id_mappings",
                        "purchases",
                        "feedbacks",
                        "publications",
                        "refunds",
                        "schema_version"
                      ]
                    },
                    "timestamp": {
                      "type": "string",
                      "format": "date-time",
                      "description": "Time when the table names were retrieved",
                      "example": "2025-04-18T11:35:40.537Z"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized - Admin permission required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Error retrieving table names",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "stack": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/__d1/schema_version": {
      "get": {
        "summary": "Get database schema version (available only for D1)",
        "description": "Returns the current database schema version information. Requires admin permission.",
        "tags": [
          "System",
          "Cloudflare D1"
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved schema version",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "version": {
                      "type": "object",
                      "description": "Schema version details",
                      "properties": {
                        "version": {
                          "type": "integer",
                          "description": "Current schema version number",
                          "example": 1
                        },
                        "description": {
                          "type": "string",
                          "description": "Description of the current schema version",
                          "example": "Added transaction_id to refunds"
                        }
                      }
                    },
                    "timestamp": {
                      "type": "string",
                      "format": "date-time",
                      "description": "Time when the version was retrieved",
                      "example": "2025-04-18T11:36:40.414Z"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized - Admin permission required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Error retrieving schema version",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "stack": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/__d1/schema_migrations": {
      "get": {
        "summary": "Execute database schema migrations (available only for D1)",
        "description": "Checks the current database schema version and runs any pending migrations. Returns migration status information. Requires admin permission.",
        "tags": [
          "System",
          "Cloudflare D1"
        ],
        "responses": {
          "200": {
            "description": "Successfully executed migrations",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "migrations": {
                      "type": "array",
                      "description": "List of migration status messages",
                      "items": {
                        "type": "string",
                        "example": "Schema is up to date (version 1)"
                      }
                    },
                    "timestamp": {
                      "type": "string",
                      "format": "date-time",
                      "description": "Time when the migrations were executed",
                      "example": "2025-04-18T11:40:38.748Z"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized - Admin permission required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Error executing migrations",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "stack": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Tester": {
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "ids": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "TesterCreateRequest": {
        "type": "object",
        "required": [
          "name",
          "ids"
        ],
        "properties": {
          "name": {
            "type": "string"
          },
          "ids": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            ]
          }
        }
      },
      "TesterIdAddRequest": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string"
          },
          "id": {
            "type": "string"
          }
        }
      },
      "Purchase": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "date": {
            "type": "string",
            "format": "date-time"
          },
          "order": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "amount": {
            "type": "number"
          },
          "screenshot": {
            "type": "string"
          }
        }
      },
      "PurchaseSummary": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "date": {
            "type": "string",
            "format": "date-time"
          },
          "order": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "refunded": {
            "type": "boolean"
          },
          "amount": {
            "type": "number"
          }
        }
      },
      "PurchaseStatus": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "date": {
            "type": "string",
            "format": "date-time"
          },
          "order": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "amount": {
            "type": "number"
          },
          "refunded": {
            "type": "boolean"
          }
        }
      },
      "PurchaseCreateRequest": {
        "type": "object",
        "required": [
          "date",
          "order",
          "description",
          "amount",
          "screenshot"
        ],
        "properties": {
          "date": {
            "type": "string",
            "format": "date-time"
          },
          "order": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "amount": {
            "type": "number"
          },
          "screenshot": {
            "type": "string"
          }
        }
      },
      "FeedbackCreateRequest": {
        "type": "object",
        "required": [
          "date",
          "purchase",
          "feedback"
        ],
        "properties": {
          "date": {
            "type": "string",
            "format": "date-time"
          },
          "purchase": {
            "type": "string"
          },
          "feedback": {
            "type": "string"
          }
        }
      },
      "PublishCreateRequest": {
        "type": "object",
        "required": [
          "date",
          "purchase",
          "screenshot"
        ],
        "properties": {
          "date": {
            "type": "string",
            "format": "date-time"
          },
          "purchase": {
            "type": "string"
          },
          "screenshot": {
            "type": "string"
          }
        }
      },
      "Publication": {
        "type": "object",
        "properties": {
          "date": {
            "type": "string",
            "format": "date-time"
          },
          "purchase": {
            "type": "string"
          },
          "screenshot": {
            "type": "string"
          }
        }
      },
      "RefundCreateRequest": {
        "type": "object",
        "required": [
          "date",
          "purchase",
          "refundDate",
          "amount",
          "transactionId"
        ],
        "properties": {
          "date": {
            "type": "string",
            "format": "date-time"
          },
          "purchase": {
            "type": "string"
          },
          "refundDate": {
            "type": "string",
            "format": "date-time"
          },
          "amount": {
            "type": "number"
          }
        }
      },
      "Refund": {
        "type": "object",
        "properties": {
          "date": {
            "type": "string",
            "format": "date-time"
          },
          "purchase": {
            "type": "string"
          },
          "refundDate": {
            "type": "string",
            "format": "date-time"
          },
          "amount": {
            "type": "number"
          },
          "transactionId": {
            "type": "string"
          }
        }
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  },
  "tags": [],
  "security": [
    {
      "bearerAuth": []
    }
  ]
}