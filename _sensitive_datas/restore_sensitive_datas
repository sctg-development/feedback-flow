#!/bin/bash
#
# Copyright (c) 2025 Ronan Le Meillat - SCTG Development
#
# Permission is hereby granted, free of charge, to anyone obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

# =============================================================================
# Secure Restore Script for Sensitive Data
# =============================================================================
#
# This script decrypts and displays the contents of an encrypted backup archive
# created by the store_sensitive_datas script. It provides a preview of what
# will be restored without actually performing the restoration.
#
# The restore process:
# 1. Validates PROJECT_ROOT environment variable
# 2. Ensures .gitignore excludes the archive from version control
# 3. Decrypts the AES-256-CBC encrypted archive
# 4. Verifies archive integrity using SHA256 hash
# 5. Lists the contents of the decrypted archive
# 6. Provides manual restoration instructions
#
# Requirements:
# - PROJECT_ROOT environment variable must be set
# - CRYPTOKEN environment variable must be set for decryption (if encrypted)
# - OpenSSL must be installed
# - tar must be installed
# - Encrypted backup file must exist: _sensitive_datas/_sensitive_datas.tar.xz.enc
#
# Usage:
#   export PROJECT_ROOT="/path/to/project"
#   export CRYPTOKEN="your-encryption-key"  # Only if backup was encrypted
#   ./restore_sensitive_datas
#
# Note: This script only decrypts and shows contents. Manual restoration required.
# =============================================================================

# Configuration Section
# ====================

# Encryption configuration (must match store_sensitive_datas)
# AES-256-CBC with PBKDF2 provides strong encryption with key derivation
# Note: AES-GCM would be preferred for authenticated encryption, but may not be
# supported in all OpenSSL versions. AES-CBC with PBKDF2 is widely compatible.
CIPHER_ALGO="aes-256-cbc"

# PBKDF2 iterations for key derivation (must match encryption settings)
PBKDF2_ITERATIONS=100000

# =============================================================================
# Main Script Logic
# =============================================================================

# .env file is located one level from this script
# load it
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
if [ -f "$SCRIPT_DIR/../.env" ]; then
    set -a
    source "$SCRIPT_DIR/../.env"
    set +a
fi

# Step 1: Validate PROJECT_ROOT
# -----------------------------
if [ ! -n "$PROJECT_ROOT" ]; then
    echo "INFO: PROJECT_ROOT environment variable not set"
    echo "For restoring in a cloned repository, set PROJECT_ROOT to the project root directory"
    echo "Example: export PROJECT_ROOT=\"/path/to/project\""
    exit 0
fi

echo "PROJECT_ROOT is set to '$PROJECT_ROOT'"

# Interactive confirmation (can be disabled for automation)
echo "This will decrypt and show the contents of the backup archive."
read -p "Press any key to continue... " -n1 -s
echo ""  # New line after user input

# Save current directory and navigate to home (safety measure)
PWD=`pwd`
cd ~

# Step 2: Ensure .gitignore excludes the archive
# -----------------------------------------------
GITIGNORE_FILE="$PROJECT_ROOT/_sensitive_datas/.gitignore"
if [ ! -f "$GITIGNORE_FILE" ]; then
    echo "Creating .gitignore file to exclude sensitive archive..."
    # Ensure the directory exists
    mkdir -p "$PROJECT_ROOT/_sensitive_datas"
    echo "_sensitive_datas.tar.xz" > "$GITIGNORE_FILE"
    echo "✓ Created $GITIGNORE_FILE with archive exclusion rules"
elif ! grep -q "^_sensitive_datas\.tar\.xz$" "$GITIGNORE_FILE"; then
    echo "Adding archive exclusion to existing .gitignore..."
    echo "_sensitive_datas.tar.xz" >> "$GITIGNORE_FILE"
    echo "✓ Updated $GITIGNORE_FILE with archive exclusion rules"
else
    echo "✓ Archive exclusion already present in .gitignore"
fi

# Step 3: Decrypt the archive
# ---------------------------
echo "Decrypting backup archive..."

# Build decryption command based on whether CRYPTOKEN is provided
DECRYPT=""
if [ -n "$CRYPTOKEN" ]; then
    DECRYPT="-pass pass:$CRYPTOKEN"
    echo "Using encryption key for decryption..."
    echo "Command: openssl enc -${CIPHER_ALGO} -d -pbkdf2 -iter ${PBKDF2_ITERATIONS} $DECRYPT -in $PROJECT_ROOT/_sensitive_datas/_sensitive_datas.tar.xz.enc -out $PROJECT_ROOT/_sensitive_datas/_sensitive_datas.tar.xz"
else
    echo "No encryption key provided - attempting unencrypted restore..."
fi

# Perform the decryption
openssl enc -${CIPHER_ALGO} -d -pbkdf2 -iter ${PBKDF2_ITERATIONS} $DECRYPT \
    -in $PROJECT_ROOT/_sensitive_datas/_sensitive_datas.tar.xz.enc \
    -out $PROJECT_ROOT/_sensitive_datas/_sensitive_datas.tar.xz

# Check if decryption was successful
if [ $? -ne 0 ]; then
    echo "ERROR: Decryption failed!"
    echo "Possible causes:"
    echo "  - Wrong encryption key (CRYPTOKEN)"
    echo "  - Corrupted backup file"
    echo "  - File not found: $PROJECT_ROOT/_sensitive_datas/_sensitive_datas.tar.xz.enc"
    exit 1
fi

# Step 4: Verify archive integrity
# ----------------------------------
echo "Verifying archive integrity..."
if [ -f "$PROJECT_ROOT/_sensitive_datas/_sensitive_datas.tar.xz.sha256" ]; then
    EXPECTED_HASH=$(cat "$PROJECT_ROOT/_sensitive_datas/_sensitive_datas.tar.xz.sha256")
    ACTUAL_HASH=$(sha256sum "$PROJECT_ROOT/_sensitive_datas/_sensitive_datas.tar.xz" | cut -d' ' -f1)
    
    if [ "$EXPECTED_HASH" != "$ACTUAL_HASH" ]; then
        echo "⚠️  WARNING: Archive integrity check FAILED!"
        echo "Expected: $EXPECTED_HASH"
        echo "Actual:   $ACTUAL_HASH"
        echo "The archive may be corrupted. Proceed with caution!"
    else
        echo "✓ Archive integrity verified"
    fi
else
    echo "⚠️  WARNING: No integrity hash file found. Cannot verify archive integrity."
fi

# Step 5: Display archive contents
# --------------------------------
echo ""
echo "=================================================================================="
echo "✓ Decryption successful! Archive contents:"
echo "=================================================================================="
tar -tvJf $PROJECT_ROOT/_sensitive_datas/_sensitive_datas.tar.xz

# Step 6: Provide restoration instructions
# ----------------------------------------
echo ""
echo "=================================================================================="
echo "RESTORATION INSTRUCTIONS"
echo "=================================================================================="
echo "To complete the restoration, run these commands manually:"
echo ""
echo "  cd $PROJECT_ROOT"
echo "  tar -xvJf $PROJECT_ROOT/_sensitive_datas/_sensitive_datas.tar.xz"
echo "  rm $PROJECT_ROOT/_sensitive_datas/_sensitive_datas.tar.xz"
echo ""
echo "WARNING: This will overwrite existing files with the same names!"
echo "=================================================================================="